<!-- Size selector dropdown like collection pages -->
<style>
.size-selector-trigger {
  cursor: pointer;
  text-decoration: none;
  color: black;
  font-weight: 500;
  font-family: 'Figtree', Arial, Helvetica, sans-serif;
  font-size: 14px;
  border: none;
  background: none;
  padding: 0;
}

.size-selector-dropdown {
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 8px;
  box-shadow: 0 -4px 12px rgba(0,0,0,0.15);
  padding: 20px;
  min-width: 280px;
  max-width: 320px;
  z-index: 1002;
  display: none;
  margin-bottom: 10px;
}

.size-selector-dropdown.active {
  display: block;
}

.size-options-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  border-bottom: 1px solid #eee;
  padding-bottom: 10px;
}

.size-options-title {
  font-weight: 600;
  font-size: 16px;
  color: #333;
}

.size-guide-link {
  font-size: 12px;
  color: #666;
  text-decoration: underline;
}

.overlay-sizes {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
  gap: 8px;
}

.size-option {
  border: 1px solid #ddd;
  background: #fff;
  padding: 12px 8px;
  text-align: center;
  cursor: pointer;
  border-radius: 4px;
  font-weight: 500;
  transition: all 0.2s ease;
}

.size-option:hover:not(.sold-out) {
  border-color: #333;
  background: #f8f8f8;
}

.size-option.sold-out {
  background: #f5f5f5;
  color: #999;
  cursor: not-allowed;
  text-decoration: line-through;
}

.size-option__label {
  display: block;
  font-size: 14px;
}

.size-option__low-stock {
  font-size: 10px;
  color: #ff6600;
  margin-top: 2px;
}

.size-option__low-stock.hidden {
  display: none;
}
</style>

<div class="size-selector-container" style="position: relative;">
  <!-- Size selector trigger button -->
  <button type="button" class="size-selector-trigger" id="size-selector-trigger">
    Escolher tamanho
  </button>

  <!-- Size selector dropdown (like collection pages) -->
  <div class="size-selector-dropdown" id="size-selector-dropdown">
    <div class="size-options-header">
      <span class="size-options-title">Seleciona o tamanho</span>
      <a href="/pages/guia-de-tamanhos" class="size-guide-link">
        Guia de tamanhos
      </a>
    </div>

    <div class="overlay-sizes">
      {% comment %} Get size option for current product {% endcomment %}
      {% assign size_option_index = -1 %}
      {% for option in product.options_with_values %}
        {% assign option_name = option.name | downcase %}
        {% if option_name == 'size' or option_name == 'tamanho' %}
          {% assign size_option_index = forloop.index0 %}
          {% assign size_option = option %}
          {% break %}
        {% endif %}
      {% endfor %}

      {% if size_option_index != -1 and size_option %}
        {% for value in size_option.values %}
          {% assign variant_available = false %}
          {% for variant in product.variants %}
            {% if variant.options[size_option_index] == value and variant.available %}
              {% assign variant_available = true %}
              {% break %}
            {% endif %}
          {% endfor %}

          <button type="button"
                  class="size-option{% unless variant_available %} sold-out{% endunless %}"
                  data-size="{{ value }}"
                  data-variant-option="{{ size_option_index }}"
                  {% unless variant_available %}disabled="disabled"{% endunless %}>
            <span class="size-option__label">{{ value }}</span>
          </button>
        {% endfor %}
      {% endif %}
    </div>
  </div>
</div>

<!-- Simple dropdown toggle script -->
<script>
  (function() {
    const trigger = document.getElementById('size-selector-trigger');
    const dropdown = document.getElementById('size-selector-dropdown');
    const sizeOptions = document.querySelectorAll('.size-option');

    if (!trigger || !dropdown) return;

    // Toggle dropdown
    trigger.addEventListener('click', function(e) {
      e.preventDefault();
      dropdown.classList.toggle('active');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
      if (!trigger.contains(e.target) && !dropdown.contains(e.target)) {
        dropdown.classList.remove('active');
      }
    });

    // Handle size selection
    sizeOptions.forEach(option => {
      option.addEventListener('click', function() {
        if (this.disabled) return;

        const selectedSize = this.dataset.size;
        const optionIndex = this.dataset.variantOption;

        // Update trigger text
        trigger.textContent = selectedSize;

        // Close dropdown
        dropdown.classList.remove('active');

        // Find and select the correct variant
        if (typeof productData !== 'undefined') {
          const matchingVariant = productData.variants.find(variant => {
            return variant.options[optionIndex] === selectedSize;
          });

          if (matchingVariant) {
            // Update the form's variant ID
            const stickyForm = document.querySelector('#sticky-product-bar form');
            const hiddenInput = stickyForm ? stickyForm.querySelector('input[name="id"]') : null;

            if (hiddenInput) {
              hiddenInput.value = matchingVariant.id;
              hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));
            }
          }
        }
      });
    });

  })();
</script>