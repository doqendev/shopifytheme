    } else {
      console.warn("No matching variant found for options:", selectedOptions);
    }
  }

  // Listen for changes to variant picker
  optionInputs.forEach(input => {
    input.addEventListener('change', updateVariant);
  });
});
</script>

{% raw %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log("Sticky bar variant scroll script loaded");

  // Find the sticky variant picker.
  var variantPicker = document.querySelector('[id^="variant-selects-template"][id*="sticky_product_bar"]');
  if (!variantPicker) {
    console.log("Sticky variant picker not found");
    return;
  }
  console.log("Sticky variant picker found:", variantPicker.id);

  // Listen for changes on any input/select within the variant picker.
  variantPicker.addEventListener('change', function(e) {
    console.log("Change event fired on sticky variant picker", e);

    // Gather selected options from the picker.
    var selectedOptions = [];
    variantPicker.querySelectorAll('input[name^="options"], select[name^="options"]').forEach(function(input) {
      selectedOptions.push(input.value.trim());
    });
    console.log("Selected options:", selectedOptions);

    // Find the matching variant using the productData object.
    var matchingVariant = productData.variants.find(function(variant) {
      return variant.options.every(function(opt, idx) {
        return String(opt).toLowerCase() === selectedOptions[idx].toLowerCase();
      });
    });
    if (matchingVariant) {
      console.log("Matching variant found:", matchingVariant);
      if (matchingVariant.featured_media && matchingVariant.featured_media.id) {
        // Find the media gallery element.
        var galleryEl = document.querySelector('[id^="MediaGallery-"]');
        if (!galleryEl) {
          console.log("Gallery element not found");
          return;
        }
        console.log("Gallery element found:", galleryEl.id);

        // Instead of splitting the id, remove the prefix "MediaGallery-"
        var sectionId = galleryEl.id.replace('MediaGallery-', '');
        console.log("Extracted sectionId:", sectionId);

        // Construct the target media id that should match the data-media-id attribute.
        var targetMediaId = sectionId + '-' + matchingVariant.featured_media.id;
        console.log("Looking for media element with data-media-id:", targetMediaId);

        // Locate the media element.
        var mediaEl = document.querySelector('[data-media-id="' + targetMediaId + '"]');
        if (mediaEl) {
          console.log("Found media element, scrolling into view", mediaEl);
          mediaEl.scrollIntoView({ behavior: 'smooth', block: 'start' });
        } else {
          console.log("No matching media element found for", targetMediaId);
        }
      } else {
        console.log("Matching variant does not have a featured_media property", matchingVariant);
      }
    } else {
      console.log("No matching variant found for options", selectedOptions);
    }
  });
});
</script>
{% endraw %}

<!-- Hide sticky bar when recommendations become visible -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sticky = document.getElementById('sticky-product-bar');
    if (!sticky) return;

    const targets = Array.from(
      document.querySelectorAll(
        'product-recommendations.related-products, product-recommendations.complementary-products, .mobile-related-products'
      )
    );
    if (!targets.length) return;

    const update = () => {
      const vh = window.innerHeight || document.documentElement.clientHeight;
      const bandTop = vh * 0.15, bandBottom = vh * 0.85;
      const onScreen = targets.some(el => {
        const r = el.getBoundingClientRect();
        return r.top < bandBottom && r.bottom > bandTop;
      });
      sticky.classList.toggle('is-hidden-by-recs', onScreen);
    };

    const io = new IntersectionObserver(update, { threshold: [0, 0.1, 0.25, 0.5] });
    targets.forEach(t => io.observe(t));
    window.addEventListener('scroll', update, { passive: true });
    window.addEventListener('resize', update);
    update();
  });
</script>

<!-- General Accordion Toggle (Click) -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const accordionButtons = document.querySelectorAll('.drawer-content .accordion-button');
  accordionButtons.forEach((button) => {
    // Skip the Envios button so its toggling is handled separately.
    if (button.textContent.trim() === "Envios, trocas e devoluções") return;
    
    button.addEventListener('click', (e) => {
      // Prevent interference from sticky bar drag
      e.stopPropagation();
      const expanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', !expanded);
      const content = button.nextElementSibling;
      if (content) {
        if (expanded) {
          content.style.maxHeight = null;
        } else {
          content.style.maxHeight = content.scrollHeight + 'px';
        }
      }
    });
  });
});
</script>

<!-- General Accordion Toggle (Pointerup) -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.drawer-content .accordion-button').forEach((button) => {
    // Skip the Envios button so its toggling is handled separately.
    if (button.textContent.trim() === "Envios, trocas e devoluções") return;
    
    button.addEventListener('pointerup', (e) => {
      e.stopPropagation();
      const expanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', !expanded);
      const content = button.nextElementSibling;
      if (content) {
        if (expanded) {
          content.style.maxHeight = null;
        } else {
          content.style.maxHeight = content.scrollHeight + 'px';
        }
      }
    });
  });
});
</script>

<!-- Override for "Envios, trocas e devoluções" to open a drawer only -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Locate the Envios button by its exact text content.
  const envioButton = Array.from(document.querySelectorAll('.accordion-button'))
    .find(btn => btn.textContent.trim() === "Envios, trocas e devoluções");

  if (envioButton) {
    // Override the default behavior on click.
    envioButton.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation(); // Block any further click handlers
      
      // Force closed state on the accordion item.
      envioButton.setAttribute('aria-expanded', 'false');
      const content = envioButton.nextElementSibling;
      if (content) {
         content.style.maxHeight = null;
      }
      
      // Open the custom centered drawer.
      const drawer = document.getElementById('envios-drawer');
      if (drawer) {
        drawer.style.display = 'block';
      }
    }, true); // Using the capture phase

    // Also override pointerup so no toggling occurs.
    envioButton.addEventListener('pointerup', function(e) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();
    }, true);
  }

  // Drawer close logic: click on overlay or close button.
  const enviosDrawer = document.getElementById('envios-drawer');
  if (enviosDrawer) {
    enviosDrawer.addEventListener('click', function(e) {
      if (e.target === enviosDrawer || e.target.classList.contains('drawer-close')) {
        enviosDrawer.style.display = 'none';
      }
    });
  }
});
</script>
