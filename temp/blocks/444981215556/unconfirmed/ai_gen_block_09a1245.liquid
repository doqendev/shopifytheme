{% doc %}
  @prompt
    faq
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-faq-container-{{ ai_gen_id }} {
    max-width: 100%;
    margin: 0 auto;
    padding: {{ block.settings.section_padding }}px 0;
  }

  .ai-faq-header-{{ ai_gen_id }} {
    text-align: {{ block.settings.text_alignment }};
    margin-bottom: {{ block.settings.spacing_between_items }}px;
  }

  .ai-faq-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    font-weight: 700;
    margin: 0 0 16px;
    color: {{ block.settings.heading_color }};
    font-family: {{ settings.type_header_font.family }}, {{ settings.type_header_font.fallback_families }};
  }

  .ai-faq-description-{{ ai_gen_id }} {
    font-size: {{ block.settings.description_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0;
    font-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
  }

  .ai-faq-list-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: {{ block.settings.spacing_between_items }}px;
  }

  .ai-faq-item-{{ ai_gen_id }} {
    border: {{ settings.text_boxes_border_thickness }}px solid rgba({{ block.settings.border_color | color_extract: 'red' }}, {{ block.settings.border_color | color_extract: 'green' }}, {{ block.settings.border_color | color_extract: 'blue' }}, {{ settings.text_boxes_border_opacity | divided_by: 100.0 }});
    border-radius: {{ settings.text_boxes_radius }}px;
    background-color: {{ block.settings.item_background_color }};
    overflow: hidden;
    {% if settings.text_boxes_shadow_opacity > 0 %}
      box-shadow: {{ settings.text_boxes_shadow_horizontal_offset }}px {{ settings.text_boxes_shadow_vertical_offset }}px {{ settings.text_boxes_shadow_blur }}px rgba({{ settings.shadow | color_extract: 'red' }}, {{ settings.shadow | color_extract: 'green' }}, {{ settings.shadow | color_extract: 'blue' }}, {{ settings.text_boxes_shadow_opacity | divided_by: 100.0 }});
    {% endif %}
  }

  .ai-faq-question-{{ ai_gen_id }} {
    width: 100%;
    padding: {{ block.settings.item_padding }}px;
    background: none;
    border: none;
    text-align: left;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: {{ block.settings.question_size }}px;
    font-weight: 600;
    color: {{ block.settings.question_color }};
    font-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
    transition: background-color 0.3s ease;
  }

  .ai-faq-question-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.question_hover_color }};
  }

  .ai-faq-question-{{ ai_gen_id }}:focus {
    outline: 2px solid {{ block.settings.question_color }};
    outline-offset: -2px;
  }

  .ai-faq-icon-{{ ai_gen_id }} {
    width: {{ block.settings.icon_size }}px;
    height: {{ block.settings.icon_size }}px;
    flex-shrink: 0;
    transition: transform 0.3s ease;
    color: {{ block.settings.icon_color }};
  }

  .ai-faq-item-{{ ai_gen_id }}[data-expanded="true"] .ai-faq-icon-{{ ai_gen_id }} {
    transform: rotate(180deg);
  }

  .ai-faq-answer-{{ ai_gen_id }} {
    padding: 0 {{ block.settings.item_padding }}px {{ block.settings.item_padding }}px;
    color: {{ block.settings.answer_color }};
    font-size: {{ block.settings.answer_size }}px;
    line-height: 1.6;
    font-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease;
  }

  .ai-faq-item-{{ ai_gen_id }}[data-expanded="true"] .ai-faq-answer-{{ ai_gen_id }} {
    max-height: 500px;
    padding-top: 0;
  }

  .ai-faq-empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: #666;
    font-style: italic;
  }

  @media screen and (max-width: 749px) {
    .ai-faq-title-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.heading_size }}px * 0.8);
    }
    
    .ai-faq-question-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.question_size }}px * 0.9);
      padding: calc({{ block.settings.item_padding }}px * 0.8);
    }
    
    .ai-faq-answer-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.answer_size }}px * 0.9);
      padding: 0 calc({{ block.settings.item_padding }}px * 0.8) calc({{ block.settings.item_padding }}px * 0.8);
    }
  }
{% endstyle %}

<faq-accordion-{{ ai_gen_id }} class="ai-faq-container-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  {% if block.settings.heading != blank or block.settings.description != blank %}
    <div class="ai-faq-header-{{ ai_gen_id }}">
      {% if block.settings.heading != blank %}
        <h2 class="ai-faq-title-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
      {% endif %}
      {% if block.settings.description != blank %}
        <div class="ai-faq-description-{{ ai_gen_id }}">{{ block.settings.description }}</div>
      {% endif %}
    </div>
  {% endif %}

  {% assign has_content = false %}
  {% for i in (1..10) %}
    {% liquid
      assign question_key = 'question_' | append: i
      assign answer_key = 'answer_' | append: i
      assign question = block.settings[question_key]
      assign answer = block.settings[answer_key]
    %}
    {% if question != blank and answer != blank %}
      {% assign has_content = true %}
      {% break %}
    {% endif %}
  {% endfor %}

  {% if has_content %}
    <div class="ai-faq-list-{{ ai_gen_id }}">
      {% for i in (1..10) %}
        {% liquid
          assign question_key = 'question_' | append: i
          assign answer_key = 'answer_' | append: i
          assign question = block.settings[question_key]
          assign answer = block.settings[answer_key]
        %}
        
        {% if question != blank and answer != blank %}
          <div class="ai-faq-item-{{ ai_gen_id }}" data-expanded="false" data-faq-item="{{ i }}">
            <button 
              class="ai-faq-question-{{ ai_gen_id }}"
              aria-expanded="false"
              aria-controls="ai-faq-answer-{{ ai_gen_id }}-{{ i }}"
              data-question-button="{{ i }}"
            >
              <span>{{ question }}</span>
              <svg class="ai-faq-icon-{{ ai_gen_id }}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </button>
            <div 
              class="ai-faq-answer-{{ ai_gen_id }}"
              id="ai-faq-answer-{{ ai_gen_id }}-{{ i }}"
              data-answer="{{ i }}"
            >
              {{ answer }}
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  {% else %}
    <div class="ai-faq-empty-state-{{ ai_gen_id }}">
      Add your first FAQ question and answer to get started
    </div>
  {% endif %}
</faq-accordion-{{ ai_gen_id }}>

<script>
  (function() {
    class FaqAccordion{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.setupEventListeners();
      }

      setupEventListeners() {
        const questions = this.querySelectorAll('[data-question-button]');
        
        questions.forEach(button => {
          button.addEventListener('click', () => {
            const itemNumber = button.dataset.questionButton;
            const faqItem = this.querySelector(`[data-faq-item="${itemNumber}"]`);
            const answer = this.querySelector(`[data-answer="${itemNumber}"]`);
            const isExpanded = faqItem.dataset.expanded === 'true';
            
            if (isExpanded) {
              this.closeItem(faqItem, button, answer);
            } else {
              if (!this.allowMultiple()) {
                this.closeAllItems();
              }
              this.openItem(faqItem, button, answer);
            }
          });
        });
      }

      allowMultiple() {
        return {{ block.settings.allow_multiple_open | json }};
      }

      openItem(item, button, answer) {
        item.dataset.expanded = 'true';
        button.setAttribute('aria-expanded', 'true');
        answer.style.maxHeight = answer.scrollHeight + 'px';
      }

      closeItem(item, button, answer) {
        item.dataset.expanded = 'false';
        button.setAttribute('aria-expanded', 'false');
        answer.style.maxHeight = '0px';
      }

      closeAllItems() {
        const allItems = this.querySelectorAll('[data-faq-item]');
        const allButtons = this.querySelectorAll('[data-question-button]');
        const allAnswers = this.querySelectorAll('[data-answer]');
        
        allItems.forEach(item => item.dataset.expanded = 'false');
        allButtons.forEach(button => button.setAttribute('aria-expanded', 'false'));
        allAnswers.forEach(answer => answer.style.maxHeight = '0px');
      }
    }

    customElements.define('faq-accordion-{{ ai_gen_id }}', FaqAccordion{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "FAQ",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Frequently Asked Questions"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description",
      "default": "<p>Find answers to common questions about our products and services.</p>"
    },
    {
      "type": "checkbox",
      "id": "allow_multiple_open",
      "label": "Allow multiple items open",
      "default": false
    },
    {
      "type": "header",
      "content": "FAQ 1"
    },
    {
      "type": "text",
      "id": "question_1",
      "label": "Question",
      "default": "What is your return policy?"
    },
    {
      "type": "richtext",
      "id": "answer_1",
      "label": "Answer",
      "default": "<p>We offer a 30-day return policy for all unused items in their original packaging.</p>"
    },
    {
      "type": "header",
      "content": "FAQ 2"
    },
    {
      "type": "text",
      "id": "question_2",
      "label": "Question",
      "default": "How long does shipping take?"
    },
    {
      "type": "richtext",
      "id": "answer_2",
      "label": "Answer",
      "default": "<p>Standard shipping takes 3-5 business days, while express shipping takes 1-2 business days.</p>"
    },
    {
      "type": "header",
      "content": "FAQ 3"
    },
    {
      "type": "text",
      "id": "question_3",
      "label": "Question",
      "default": "Do you offer international shipping?"
    },
    {
      "type": "richtext",
      "id": "answer_3",
      "label": "Answer",
      "default": "<p>Yes, we ship to most countries worldwide. Shipping costs and delivery times vary by location.</p>"
    },
    {
      "type": "header",
      "content": "FAQ 4"
    },
    {
      "type": "text",
      "id": "question_4",
      "label": "Question"
    },
    {
      "type": "richtext",
      "id": "answer_4",
      "label": "Answer"
    },
    {
      "type": "header",
      "content": "FAQ 5"
    },
    {
      "type": "text",
      "id": "question_5",
      "label": "Question"
    },
    {
      "type": "richtext",
      "id": "answer_5",
      "label": "Answer"
    },
    {
      "type": "header",
      "content": "FAQ 6"
    },
    {
      "type": "text",
      "id": "question_6",
      "label": "Question"
    },
    {
      "type": "richtext",
      "id": "answer_6",
      "label": "Answer"
    },
    {
      "type": "header",
      "content": "FAQ 7"
    },
    {
      "type": "text",
      "id": "question_7",
      "label": "Question"
    },
    {
      "type": "richtext",
      "id": "answer_7",
      "label": "Answer"
    },
    {
      "type": "header",
      "content": "FAQ 8"
    },
    {
      "type": "text",
      "id": "question_8",
      "label": "Question"
    },
    {
      "type": "richtext",
      "id": "answer_8",
      "label": "Answer"
    },
    {
      "type": "header",
      "content": "FAQ 9"
    },
    {
      "type": "text",
      "id": "question_9",
      "label": "Question"
    },
    {
      "type": "richtext",
      "id": "answer_9",
      "label": "Answer"
    },
    {
      "type": "header",
      "content": "FAQ 10"
    },
    {
      "type": "text",
      "id": "question_10",
      "label": "Question"
    },
    {
      "type": "richtext",
      "id": "answer_10",
      "label": "Answer"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "spacing_between_items",
      "min": 8,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Spacing between items",
      "default": 16
    },
    {
      "type": "range",
      "id": "item_padding",
      "min": 12,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Item padding",
      "default": 20
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    },
    {
      "type": "range",
      "id": "description_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Description size",
      "default": 16
    },
    {
      "type": "range",
      "id": "question_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Question size",
      "default": 16
    },
    {
      "type": "range",
      "id": "answer_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Answer size",
      "default": 14
    },
    {
      "type": "range",
      "id": "icon_size",
      "min": 16,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Icon size",
      "default": 20
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Description color",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "item_background_color",
      "label": "Item background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e5e5e5"
    },
    {
      "type": "color",
      "id": "question_color",
      "label": "Question color",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "question_hover_color",
      "label": "Question hover background",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "answer_color",
      "label": "Answer color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "icon_color",
      "label": "Icon color",
      "default": "#121212"
    }
  ],
  "presets": [
    {
      "name": "FAQ"
    }
  ]
}
{% endschema %}