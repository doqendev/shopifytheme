<style>
  .filters-container {
    overflow-x: auto;
    white-space: nowrap;
    margin-bottom: 20px;
  }
  .filters-slide {
    display: flex;
    gap: 10px;
  }
  .filter-pill {
    padding: 10px 20px;
    background: #f5f5f5;
    border: 1px solid #ddd;
    cursor: pointer;
    border-radius: 20px;
    transition: background 0.3s;
  }
  .filter-pill:hover {
    background: #ccc;
  }

  .active-facets__button-remove.underlined-link {
    color: black!important;
    order: 1; /* Ensure it's always the last element */
  }

  .active-facets__button-inner {
    order: 99; /* Ensure custom pills are placed before "Remove all filters" */
  }

.active-facets {
  display: grid; /* Use flexbox for proper alignment */
  flex-wrap: wrap; /* Allow pills to wrap to a new line if needed */
  gap: 10px; /* Add spacing between pills */
}

.active-facets__button {
  order: 1; /* Default order for all buttons */
}

.active-facets__button--remove {
  order: 99; /* Ensure "Remove all filters" is always last */
}

  
</style>

<div class="custom-filter-pills-container">
  <!-- Pills will be dynamically added here -->
</div>

<div class="filters-container">
  <div class="filters-slide">
    {% if section.settings.filter_tags != blank %}
      {% assign tags = section.settings.filter_tags | split: ',' %}
      {% for tag in tags %}
        <button class="filter-pill" data-tag="{{ tag | strip }}">{{ tag | capitalize }}</button>
      {% endfor %}
    {% else %}
      {% assign tags = collection.all_tags %}
      {% for tag in tags %}
        <button class="filter-pill" data-tag="{{ tag }}">{{ tag | capitalize }}</button>
      {% endfor %}
    {% endif %}
  </div>
</div>

<script>
function updateProductCount() {
  const visibleProducts = document.querySelectorAll('.grid__item:not([style*="display: none"])').length;

  // Update desktop count
  const productCountElementDesktop = document.querySelector('#ProductCountDesktop');
  if (productCountElementDesktop) {
    productCountElementDesktop.innerText = `${visibleProducts} ${visibleProducts === 1 ? 'product' : 'products'}`;
  }

  // Update mobile count
  const productCountElementMobile = document.querySelector('#ProductCount');
  if (productCountElementMobile) {
    productCountElementMobile.innerText = `${visibleProducts} ${visibleProducts === 1 ? 'product' : 'products'}`;
  }
}

function addFilterPill(tag) {
  const container = document.querySelector('.active-facets');
  if (!container) return;

  // Check if a pill for the tag already exists
  if (container.querySelector(`[data-filter="${tag}"]`)) return;

  // Create the pill wrapper
  const pillWrapper = document.createElement('a');
  pillWrapper.className = 'active-facets__button active-facets__button--light';
  pillWrapper.setAttribute('role', 'button');
  pillWrapper.href = 'javascript:void(0)';

  // Create the pill inner
  const pillInner = document.createElement('span');
  pillInner.className = 'active-facets__button-inner button button--tertiary';
  pillInner.dataset.filter = tag;
  pillInner.innerHTML = `
    ${tag}
    <span class="svg-wrapper">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-close-small" viewBox="0 0 12 13">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8.486 9.33 2.828 3.67M2.885 9.385l5.544-5.77"></path>
      </svg>
    </span>
    <span class="visually-hidden">Remove filter</span>
  `;

  pillWrapper.appendChild(pillInner);

  // Ensure it shows on mobile
  pillWrapper.classList.add('mobile-visible');

  // Append the pill at the beginning of the active facets container
  container.prepend(pillWrapper);

  // Add event listener to remove the pill
  pillWrapper.addEventListener('click', () => {
    pillWrapper.remove();

    // Remove the filter from URL
    const urlParams = new URLSearchParams(window.location.search);
    let filters = urlParams.get('custom_filter');
    filters = filters ? filters.split(',') : [];
    filters = filters.filter(filter => filter !== tag);
    if (filters.length) {
      urlParams.set('custom_filter', filters.join(','));
    } else {
      urlParams.delete('custom_filter');
    }
    history.replaceState(null, '', `?${urlParams.toString()}`);

    // Update the product grid
    document.querySelectorAll('.grid__item').forEach(card => {
      const tags = card.dataset.tags ? card.dataset.tags.toLowerCase() : '';
      card.style.display = filters.some(filter => tags.includes(filter)) ? 'block' : 'none';
    });

    // Update product count
    updateProductCount();
  });
}

document.querySelectorAll('.filter-pill').forEach(pill => {
  pill.addEventListener('click', function () {
    const tag = this.dataset.tag.toLowerCase();

    // Get the current URL filters
    const urlParams = new URLSearchParams(window.location.search);
    let filters = urlParams.get('custom_filter');
    filters = filters ? filters.split(',') : [];

    // Avoid adding duplicate filters
    if (!filters.includes(tag)) {
      filters.push(tag);
    }

    // Update the URL
    urlParams.set('custom_filter', filters.join(','));
    history.replaceState(null, '', `?${urlParams.toString()}`);

    // Apply the filter
    document.querySelectorAll('.grid__item').forEach(card => {
      const tags = card.dataset.tags ? card.dataset.tags.toLowerCase() : '';
      card.style.display = filters.some(filter => tags.includes(filter)) ? 'block' : 'none';
    });

    // Add the filter pill
    addFilterPill(tag);

    // Update product count
    updateProductCount();
  });
});

// Apply custom filter on page load
window.addEventListener('DOMContentLoaded', () => {
  const urlParams = new URLSearchParams(window.location.search);
  const customFilters = urlParams.get('custom_filter');
  if (customFilters) {
    const filters = customFilters.split(',');

    document.querySelectorAll('.grid__item').forEach(card => {
      const tags = card.dataset.tags ? card.dataset.tags.toLowerCase() : '';
      card.style.display = filters.some(filter => tags.includes(filter)) ? 'block' : 'none';
    });

    // Add pills for each active filter
    filters.forEach(filter => addFilterPill(filter));

    // Update product count
    updateProductCount();
  }
});


</script>

{% schema %}
{
  "name": "Collection Filters",
  "settings": [
    {
      "type": "text",
      "id": "filter_tags",
      "label": "Filter Tags (comma-separated)",
      "default": "cal√ßas,sobretudo,camisola"
    }
  ]
}
{% endschema %}
