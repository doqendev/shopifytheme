{% schema %}
{
  "name": "Sticky Product Bar",
  "settings": [],
  "presets": [
    {
      "name": "Sticky Product Bar"
    }
  ]
}
{% endschema %}

{% comment %} Create a dummy block object with default settings {% endcomment %}
{% assign dummy_block = '{ "settings": { "picker_type": "button", "swatch_shape": "circle" }, "shopify_attributes": "" }' | parse_json %}

{% unless product.has_only_default_variant %}
  {{ 'component-product-variant-picker.css' | asset_url | stylesheet_tag }}
  {{ 'component-swatch.css' | asset_url | stylesheet_tag }}
  {{ 'swatches-cheyenne.css' | asset_url | stylesheet_tag }}
{% endunless %}
{{ 'component-swatch-input.css' | asset_url | stylesheet_tag }}
{{ 'component-product-variant-picker.css' | asset_url | stylesheet_tag }}
{{ 'component-swatch.css' | asset_url | stylesheet_tag }}
{{ 'swatches-cheyenne.css' | asset_url | stylesheet_tag }}

<style>

@media (min-width: 750px) {
  #sticky-product-bar {
    display: none;
  }
}
  
@media (max-width: 749px) {
/* Sticky Product Bar Outer Container */
#sticky-product-bar {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  background-color: #ffffff;
  box-shadow: 0 -1px 15px rgba(0, 0, 0, 0.1);
  transform: translateY(0);
  transition: transform 0.25s ease;
  height: auto; /* Static height */
  overflow: visible;
  z-index: 1000;
  cursor: default;
}

.sticky-bar-inner {
  height: auto;
  overflow: visible;
}

.drawer-content {
  display: none !important; /* Hide all non-essential drawer content */
}

/* Small “grab” bar indicator */
#sticky-product-bar::before { display: none; }

/* Ensure any internal size-chart, related, footer blocks are hidden */
#sticky-product-bar .size-chart,
#sticky-product-bar .mobile-related-products,
#sticky-product-bar .drawer-footer { display: none !important; }

/* Hidden state when recommendations are visible */
#sticky-product-bar.is-hidden-by-recs { transform: translateY(110%); pointer-events: none; }

/* Variant label adjustments */
#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD > div > label {
  display: none;
}
#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD > fieldset.js.product-form__input.product-form__input--pill > legend {
  display: none;
}
#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD > fieldset.js.product-form__input.product-form__input--swatch > label {
  margin-top: 8px;
  margin-left: 1px;
  margin-right: 10px;
}
#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD > fieldset.js.product-form__input.product-form__input--pill {
  margin-top: 4px;
}
.product-form__input--pill input[type=radio] + label {
  border-radius: 0% !important;
}

/* Layout/spacing tweaks */
#sticky-product-bar > .sticky-bar-inner > div.sticky-bar-summary {
  position: relative;
  margin: 15px 15px 0;
  padding-right: 4.25rem;
}
#ProductSubmitButton- {
  margin-top: -7px;
  margin-bottom: 15px;
  margin-right: 15px;
}

#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD > fieldset.js.product-form__input.product-form__input--swatch,
#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD > fieldset.js.product-form__input.product-form__input--pill {
  margin-inline: 0px!important;
}
#sticky-product-bar .sticky-bar-summary .product-title {
  font-family: "Figtree", Arial, Helvetica, sans-serif;
  font-weight: normal;
  font-size: 1.3rem;
  line-height: 1.8rem;
  text-decoration: none;
  white-space: normal;
  overflow: visible;
  text-overflow: initial;
  color: black;
  margin: 0;
  margin-left: 15px;
}

/* Variant picker layout */
#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD {
  display: flex;
  flex-direction: row;
  justify-content: center;
  width: 100%;
  margin-top: 9px;
  gap: 2%;
}
#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD > div:nth-child(1) > div > span.dropdown-swatch > span {
  width: 20px;
  height: 20px;
  border-radius: 50%;
}
#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD > div {
  width: 44%;
}
#variant-selects-template--24455438926148__sticky_product_bar_HRGKtD > div > div > span.svg-wrapper {
  margin-right: 10px;
}

/* Price styling */
#sticky-product-bar > div > div > div.sticky-bar-summary > div.price_variants > div.product-price > div > div > div.price__sale {
  background-color: transparent;
}
#sticky-product-bar > div > div > div.sticky-bar-summary > div.price_variants > div.product-price > div {
  font-weight: bold!important;
  font-size: 15px!important;
}
#sticky-product-bar > div.sticky-bar-inner > div > div.sticky-bar-summary > div.price_variants
  > div.product-price > div > div > div.price__sale > span.price-item.price-item--sale.price-item--last {
  color: #dc2e2e;
  font-weight: 500;
}

  }


@media (min-width: 748px) { 
#sticky-product-bar > div.drawer-content > div.drawer-footer > footer > div.footer__content-top.page-width > div.mobile-menu > nav {
  display:none;
}
  }


.#sticky-product-bar > div.drawer-content > div.drawer-footer > footer {
  padding: 0px;
  background-color: fff; /* Light background for contrast */
}



#sticky-product-bar > div.drawer-content > div.mobile-related-products {
  margin-left: 0px;
  margin-right: 0px;
  margin-top: 70px!important;
}


  #sticky-product-bar > div.drawer-content > div.mobile-related-products > h2 {
    margin-left: 10%!important;
  }

  #sticky-product-bar > div.drawer-content > div.drawer-footer > footer > div.footer__content-top.page-width > div.mobile-menu > nav {
    padding: 0px!important;
  }

  #sticky-product-bar > div.drawer-content > div.drawer-footer > footer > div.footer__content-top.page-width {
    margin: 0px;
  }

  .footer__content-top {
    padding-bottom: 5rem!important;
}

  .footer-block--newsletter {
    margin-bottom: 70px;
}

  #sticky-product-bar > div.drawer-content > div.drawer-footer > footer > div.footer__content-top.page-width > div.mobile-menu {
    margin-top: 30px;
  }

.drawer-content .accordion-content {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease;
}

.drawer-content .accordion-button,
.drawer-content .accordion-content {
  pointer-events: auto;
}

  .drawer-modal {
  display: none; /* Hidden by default */
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5); /* Semi-transparent overlay */
  z-index: 2000; /* Ensure it's on top */
}

.drawer-modal-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: #fff;
    padding: 20px;
    border-radius: 4px;
    max-width: 100%;
    max-height: 80%;
    width: 95%;
    height: 80%;
    overflow-y: auto;
}

.drawer-close {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
}

.size-chart {
  margin-top: 10px;
  margin-left: 4%;
  margin-bottom: 6px;
}

/* Title and swatches inline layout */
.title-and-swatches {
  display: flex;
  align-items: flex-start;
  width: 100%;
  margin-top: 20px;
  gap: 15px;
  padding-left: 0;
  padding-right: 15px;
  min-height: 24px;
}

.product-title {
  flex: 1;
  margin: 0;
  margin-left: 15px;
  padding: 0;
  white-space: normal;
  overflow: visible;
  line-height: 1.4;
  max-width: calc(100% - 80px);
  padding-top: 2px;
}

.wishlist-heart-wrapper {
  flex-shrink: 0;
  display: flex;
  align-items: flex-start;
  justify-content: center;
  margin-left: -5px;
}

.wishlist-heart-inline {
  position: static !important;
  top: auto !important;
  right: auto !important;
  width: auto !important;
  height: auto !important;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  margin: 0;
  display: flex !important;
  align-items: center;
  justify-content: center;
  line-height: 1;
}

.wishlist-heart-inline .wishlist-toggle__icon {
  width: 20px !important;
  height: 20px !important;
  fill: none;
  stroke: #000;
  stroke-width: 2;
  display: block;
  vertical-align: middle;
}

.wishlist-heart-inline[aria-pressed="true"] .wishlist-toggle__icon,
.wishlist-heart-inline.is-active .wishlist-toggle__icon {
  fill: #dc2e2e;
  stroke: #dc2e2e;
}

.wishlist-heart-inline[aria-pressed="true"] .wishlist-toggle__icon path,
.wishlist-heart-inline.is-active .wishlist-toggle__icon path {
  fill: #dc2e2e;
  stroke: #dc2e2e;
}

.product-swatches-inline {
  flex-shrink: 0;
  display: flex;
  align-items: flex-start;
  margin: 0;
  padding: 0;
  padding-top: 2px;
  pointer-events: auto;
  z-index: 10;
}

.product-swatches-inline .swatch-condensed {
  display: flex;
  align-items: center;
  gap: 5px;
}

/* Add spacing to price section */
.price_variants {
  margin-top: 8px;
}

.price_variants .product-price {
  margin-bottom: 20px;
  margin-left: 15px;
}

/* Hide size options and labels in inline swatches */
.product-swatches-inline .product-form__input--size-hidden,
.product-swatches-inline fieldset[data-size-option="true"] {
  display: none !important;
}

/* Style the "Escolher tamanho" button on mobile */
@media screen and (max-width: 749px) {
  [data-size-drawer-trigger],
  .add-to-cart [data-size-drawer-trigger] {
    margin-left: 3% !important;
    width: 94% !important;
    margin-bottom: 10px !important;
    box-sizing: border-box !important;
  }
}

.product-swatches-inline .product-form__input--swatch legend,
.product-swatches-inline .product-form__input--swatch .form__label {
  display: none !important;
}

/* Compact swatch styling for inline display */
.product-swatches-inline .product-form__input--swatch {
  margin: 0 !important;
  gap: 4px !important;
}

.product-swatches-inline .swatch {
  width: 16px !important;
  height: 16px !important;
}

/* Condensed swatch styling */
.swatch-condensed {
  display: flex;
  gap: 5px;
  cursor: pointer;
  pointer-events: auto;
  position: relative;
  z-index: 10;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1);
  user-select: none;
  -webkit-user-select: none;
  touch-action: auto !important;
  align-items: center;
}

.current-swatch {
  display: flex;
  align-items: center;
  justify-content: center;
}

.current-swatch .swatch {
  width: 18px !important;
  height: 18px !important;
  border: 2px solid #fff !important;
  box-shadow: 0 0 0 1px #000 !important;
  border-radius: 0 !important;
  background-size: cover !important;
  background-position: center !important;
  display: block;
}

.swatch-counter {
  font-size: 12px;
  font-weight: 500;
  color: #666;
  pointer-events: auto;
  cursor: pointer;
  line-height: 1;
  display: flex;
  align-items: center;
}

/* External Swatch Drawer - positioned directly above sticky bar */
.swatch-drawer-external {
  position: fixed;
  left: 0;
  right: 0;
  background: #fff;
  border-top: 1px solid #ddd;
  box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
  z-index: 1001;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}

.swatch-drawer-external.active {
  opacity: 1;
  visibility: visible;
}

.swatch-drawer-content-external {
  padding: 8px 20px;
  overflow-x: auto;
  overflow-y: hidden;
}

.swatch-drawer-horizontal-external {
  display: flex;
  gap: 12px;
  align-items: center;
  justify-content: flex-start;
  min-height: 30px;
}

.swatch-drawer-item {
  flex-shrink: 0;
  cursor: pointer;
  padding: 6px;
  border-radius: 4px;
  transition: background-color 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.swatch-drawer-item:hover {
  background-color: #f5f5f5;
}

.swatch-drawer-item.selected {
  background-color: transparent;
}

/* Style swatches in the external drawer - match condensed swatch styling */
.swatch-drawer-item .swatch {
  width: 18px !important;
  height: 18px !important;
  border: 2px solid #fff !important;
  box-shadow: none !important;
  border-radius: 0 !important;
  background-size: cover !important;
  background-position: center !important;
  display: inline-block !important;
}

/* Active state for drawer swatches - match condensed swatch active state */
.swatch-drawer-item.selected .swatch {
  border: 3px solid #fff !important;
  box-shadow: 0 0 0 1px #000 !important;
}

/* Hover state for drawer swatches */
.swatch-drawer-item:hover:not(.selected) .swatch {
  transform: scale(1.05);
  opacity: 0.9;
}
</style>

{% liquid
  assign featured_media = product.featured_media | default: product.featured_image
  if featured_media
    assign wishlist_image = featured_media | image_url: width: 360
  else
    assign wishlist_image = ''
  endif

  assign size_option_index = -1
  for option in product.options_with_values
    assign option_name = option.name | downcase
    if option_name == 'size' or option_name == 'tamanho'
      assign size_option_index = forloop.index0
      break
    endif
  endfor
%}

<!-- Provide the product data in JSON -->
<script>
  var productData = {{ product | json }};
</script>

<!-- Sticky Product Bar Container -->
<div id="sticky-product-bar" class="sticky-bar" aria-expanded="false">
  <div class="sticky-bar-inner">
    <div class="sticky-bar-header">
      <!-- Left side: Title, Price, Variant Picker -->
      <div
        class="sticky-bar-summary product-card-wrapper"
        data-product-handle="{{ product.handle }}"
        data-product-title="{{ product.title | escape }}"
        data-product-url="{{ product.url | escape }}"
        data-product-image="{{ wishlist_image | escape }}"
        data-product-price="{{ product.price | money_without_trailing_zeros | escape }}"
        data-variants='{{ product.variants | json | escape }}'
        data-size-index="{{ size_option_index }}"
      >
        <div class="title-and-swatches">
          <div class="product-title">
            {{ product.title }}
          </div>
          <div class="wishlist-heart-wrapper">
            <button
              class="wishlist-toggle wishlist-heart-inline"
              type="button"
              aria-pressed="false"
              aria-label="{{ 'general.add_to_wishlist' | t | default: 'Add to wishlist' }}"
            >
              <svg class="wishlist-toggle__icon" viewBox="0 0 24 24" role="presentation" focusable="false">
                <path d="M12 21.35 10.55 20.03C6.2 15.99 3 12.99 3 9.31 3 6.28 5.42 4 8.4 4A5.2 5.2 0 0 1 12 5.86 5.2 5.2 0 0 1 15.6 4C18.58 4 21 6.28 21 9.31c0 3.68-3.2 6.68-7.55 10.72z" />
              </svg>
            </button>
          </div>
          {% unless product.has_only_default_variant %}
          <div class="product-swatches-inline">
            {% assign color_options = product.options_with_values | where: 'name', 'Color' | first %}
            {% unless color_options %}
              {% assign color_options = product.options_with_values | where: 'name', 'Cor' | first %}
            {% endunless %}

            {% if color_options and color_options.values.size > 0 %}
              {% assign swatch_count = color_options.values.size %}
              {% if swatch_count < 2 %}
                <!-- Show all swatches when fewer than 2 -->
                {% render 'product-variant-picker', product: product, block: dummy_block, product_form_id: 'product-form-' | append: section.id %}
              {% else %}
                <!-- Show condensed swatch + counter when 2 or more -->
                <div class="swatch-condensed" data-swatch-count="{{ swatch_count }}">
                  <div class="current-swatch" data-current-color="{{ color_options.selected_value | default: color_options.values.first }}">
                    {% assign first_value = color_options.values.first %}
                    {% render 'swatch', swatch: first_value.swatch, shape: 'square' %}
                  </div>
                  <span class="swatch-counter">+{{ swatch_count | minus: 1 }}</span>
                </div>
              {% endif %}
            {% else %}
              <!-- No color options, show regular variant picker -->
              {% render 'product-variant-picker', product: product, block: dummy_block, product_form_id: 'product-form-' | append: section.id %}
            {% endif %}
          </div>
          {% endunless %}
        </div>
        <div class="price_variants">
          <div class="product-price">
            {% render 'price', product: product, use_variant: true, show_badges: false %}
          </div>
        </div>
      </div>
      <!-- Right side: Add to Cart button(s) -->
      <div class="add-to-cart">
        {% render 'buy-buttons',
            block: dummy_block,
            product: product,
            product_form_id: 'product-form-' | append: section.id,
            section_id: section.id,
            show_pickup_availability: false
        %}
      </div>
    </div>
  </div>

  <div class="size-chart">
  {% render 'size-chart' %}
    </div>
  <!-- Drawer Content -->
  <div class="drawer-content" style="background: #fff;">
    <div class="drawer-description" style="color: #333; font-size: 14px; line-height: 1.5; margin-left: 5%; margin-right: 5%; margin-top: 4rem;">
      {{ product.content }}
    </div>

  <!-- Accordion: Added below the product description -->
  <div class="product-info-accordion" style="margin: 5rem 5%; z-index:1000;">
    <div class="accordion-item">
      <button class="accordion-button" aria-expanded="false">
        Composição e cuidados
      </button>
      <div class="accordion-content">
        <p>
          Exemplo: 100% Algodão. Lavar à máquina a 30°C.
        </p>
      </div>
    </div>

    <div class="accordion-item">
      <button class="accordion-button" aria-expanded="false">
        Envios, trocas e devoluções
      </button>
      <div class="accordion-content">
        <!-- <p>
          Exemplo: Entrega em 2-3 dias úteis. Trocas e devoluções até 30 dias.
        </p> --> 
      </div>
    </div>

    <div class="accordion-item">
      <button class="accordion-button" aria-expanded="false">
        Disponibilidade na loja
      </button>
      <div class="accordion-content">
        <p>
          Exemplo: Disponível em todas as lojas da região.
        </p>
      </div>
    </div>

    <div class="accordion-item">
      <button class="accordion-button" aria-expanded="false">
        Partilhar
      </button>
      <div class="accordion-content">
        <p>
          <a href="#">Facebook</a> | <a href="#">Instagram</a> | <a href="#">Twitter</a>
        </p>
      </div>
    </div>
  </div>
    
    <!-- DRAWER MARKUP: Place this outside the sticky bar, typically near the bottom of the body -->
<div id="envios-drawer" class="drawer-modal">
  <div class="drawer-modal-content">
    <!-- Close Button -->
    <button class="drawer-close" aria-label="Close">&times;</button>

    <!-- Drawer Body -->
    <div class="drawer-modal-body">

      <!-- MÉTODOS DE ENVIO -->
      <h3>MÉTODOS DE ENVIO</h3>
      <ul>
        <li>Recolha na loja <strong>GRÁTIS</strong>.</li>
        <li>Envio para o ponto de entrega <strong>3,99 €</strong></li>
        <li>Envio normal <strong>4,99 €</strong></li>
        <li>Envio normal (Açores e Madeira) <strong>29,99 €</strong></li>
      </ul>

      <!-- TROCAS E DEVOLUÇÕES -->
      <h3>TROCAS E DEVOLUÇÕES</h3>
      <p>
        Podes devolver um artigo até 30 dias após receberes o e-mail de confirmação de envio da tua encomenda.
      </p>

      <!-- TROCAS -->
      <h3>TROCAS</h3>
      <ul>
        <li>Na loja Lefties – <strong>GRÁTIS</strong></li>
        <li>
          Artigos comprados em Cheyenne.pt podem ser trocados por outros de tamanho ou cor diferentes, em qualquer loja Cheyenne, desde que haja disponibilidade.
        </li>
        <li>
          Também podes efetuar a troca através de Cheyenne.pt. Após a verificação do estado do artigo, enviamos o novo produto de substituição.
        </li>
      </ul>

      <!-- DEVOLUÇÕES -->
      <h3>DEVOLUÇÕES</h3>
      <ul>
        <li>Na loja – <strong>GRÁTIS</strong></li>
        <li>Pela Cheyenne.pt - <strong>1,99 €</strong></li>
        <li>
          Para ver os pontos de entrega disponíveis, clique 
          <a href="#">[AQUI]</a>
        </li>
      </ul>

    </div>
  </div>
</div>


    <div class="mobile-related-products">
      <h2 class="also" style="margin-bottom: 1em;">Talvez lhe possa interessar</h2>
      {% render 'random-collection-grid' %}
    </div>
    <div class="drawer-footer" style="margin-top: 20px;">
      {% render 'footer-drawer' %}
    </div>
  </div>
</div>

<!-- External Swatch Selection Drawer - positioned above sticky bar -->
<div id="swatch-drawer" class="swatch-drawer-external" style="display: none;">
  <div class="swatch-drawer-content-external">
    {% unless product.has_only_default_variant %}
      {% assign color_options = product.options_with_values | where: 'name', 'Color' | first %}
      {% unless color_options %}
        {% assign color_options = product.options_with_values | where: 'name', 'Cor' | first %}
      {% endunless %}

      {% if color_options and color_options.values.size > 0 %}
        <div class="swatch-drawer-horizontal-external">
          {% for value in color_options.values %}
            {% assign variant_for_color = null %}
            {% assign color_option_position = color_options.position | minus: 1 %}

            {% comment %} Find variant based on the color option position {% endcomment %}
            {% for variant in product.variants %}
              {% assign variant_color = variant.options[color_option_position] | default: variant.options[0] %}
              {% if variant_color == value %}
                {% assign variant_for_color = variant %}
                {% break %}
              {% endif %}
            {% endfor %}

            <div class="swatch-drawer-item"
                 data-color-value="{{ value | escape }}"
                 data-variant-id="{{ variant_for_color.id | default: '' }}"
                 data-color-name="{{ value | escape }}">
              {% render 'swatch', swatch: value.swatch, shape: 'square' %}
            </div>
          {% endfor %}
        </div>
      {% endif %}
    {% endunless %}
  </div>
</div>

<!-- JS for sticky bar drag + momentum + recalc/clamp -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const stickyBar = document.getElementById('sticky-product-bar');
  
  // Disable default touch actions so pointer events work reliably.
  stickyBar.style.touchAction = 'none';
  
  const minHeight = 195; // Collapsed height
  let maxHeight = stickyBar.scrollHeight; // Current "expanded" height

  let startY = 0;
  let startHeight = 0;
  let dragging = false;
  
  // For velocity-based momentum
  let lastY = 0;
  let lastTime = 0;
  let velocity = 0;

  // ---------- ORIGINAL “SWIPE FEEL” VALUES ----------
  const dragMultiplier = 1.5; // (Reverted to your original value)
  const deceleration = 0.0025; // (Reverted to your original value)

  // --------------------------
  // HELPER: Recalc/Clamp Height
  // --------------------------
  function recalcMaxHeight() {
    const newMaxHeight = stickyBar.scrollHeight;
    const currentHeight = stickyBar.offsetHeight;
    
    maxHeight = newMaxHeight;
    
    // If the bar is now taller than content (e.g. dropdown was closed),
    // clamp it so no blank space remains.
    if (currentHeight > newMaxHeight) {
      stickyBar.style.height = newMaxHeight + 'px';
    } else {
      // If the bar was basically at old max, keep it at new max
      if (Math.abs(currentHeight - maxHeight) < 2) {
        stickyBar.style.height = newMaxHeight + 'px';
      }
    }
  }

  // --------------------------
  // MOMENTUM ANIMATION
  // --------------------------
  function animateMomentum(initialVelocity) {
    let currentHeight = stickyBar.offsetHeight;
    let v = initialVelocity;
    let previousTime = performance.now();
    
    function step(currentTime) {
      const dt = currentTime - previousTime;
      previousTime = currentTime;
      
      currentHeight += v * dt;
      
      // Apply deceleration
      if (v > 0) {
        v -= deceleration * dt;
        if (v < 0) v = 0;
      } else if (v < 0) {
        v += deceleration * dt;
        if (v > 0) v = 0;
      }
      
      // Clamp to min/max
      if (currentHeight < minHeight) {
        currentHeight = minHeight;
        v = 0;
      } else if (currentHeight > maxHeight) {
        currentHeight = maxHeight;
        v = 0;
      }
      
      stickyBar.style.height = currentHeight + 'px';
      
      // Continue if velocity remains
      if (Math.abs(v) > 0.01) {
        requestAnimationFrame(step);
      } else {
        // Snap to nearest if close
        const snapThreshold = 50;
        if (currentHeight - minHeight < snapThreshold) {
          stickyBar.style.height = minHeight + 'px';
        } else if (maxHeight - currentHeight < snapThreshold) {
          stickyBar.style.height = maxHeight + 'px';
        }
      }
    }
    
    requestAnimationFrame(step);
  }
  
  // --------------------------
  // POINTER EVENTS FOR DRAG
  // --------------------------

  
  // Prevent pointer events from interfering with <select> usage and swatch-condensed
  document.querySelectorAll('select').forEach(function(selectEl) {
    selectEl.addEventListener('pointerdown', function(e) {
      e.stopPropagation();
    });
  });

  // Allow touch events on swatch-condensed element
  const swatchCondensedEl = document.querySelector('.swatch-condensed');
  if (swatchCondensedEl) {
    swatchCondensedEl.style.touchAction = 'auto';
    console.log('✓ Set touch-action: auto on swatch-condensed');
  }

  // --------------------------
  // LISTEN FOR SUBMENU OPEN/CLOSE
  // --------------------------
  // We'll re-measure the bar after each toggle,
  // to clamp or expand as needed.
  const dropdownLinks = document.querySelectorAll('.mobile-menu .has-submenu > a.menu-link');
  dropdownLinks.forEach(link => {
    link.addEventListener('click', function() {
      // Let your existing code open/close the dropdown,
      // then recalc/clamp after a short delay
      setTimeout(() => {
        recalcMaxHeight();
      }, 300);
    });
  });
});
</script>


<!-- Variant ID Sync Script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  if (typeof productData === 'undefined' || !productData.variants) {
    console.warn("productData not found or has no variants");
    return;
  }
  
  const buyButtonsForm = document.querySelector('#sticky-product-bar .add-to-cart form');
  if (!buyButtonsForm) {
    console.warn("No buy-buttons form found within .add-to-cart");
    return;
  }
  
  const hiddenInput = buyButtonsForm.querySelector('input[name="id"]');
  if (!hiddenInput) {
    console.warn("No hidden input[name='id'] found in buy-buttons form");
    return;
  }
  
  const variantPickerEl = document.getElementById('variant-selects-{{ section.id }}');
  if (!variantPickerEl) {
    console.warn("No variant-picker element found with id: variant-selects-{{ section.id }}");
    return;
  }
  
  const optionInputs = variantPickerEl.querySelectorAll('input[name^="options"], select[name^="options"]');
  if (!optionInputs.length) {
    console.warn("No variant option inputs found in variant-picker");
    return;
  }

  function getSelectedOptions() {
    const selected = [];
    optionInputs.forEach(input => {
      if (input.tagName.toLowerCase() === 'select' && input.value === "") {
        selected.push(null);
      } else {
        selected.push(input.value.trim());
      }
    });
    return selected;
  }

  function findVariant(selectedOptions) {
    return productData.variants.find(variant => {
      return variant.options.every((opt, idx) => {
        return String(selectedOptions[idx]).toLowerCase() === String(opt).toLowerCase();
      });
    });
  }

  function updateVariant() {
    const selectedOptions = getSelectedOptions();
    const matchingVariant = findVariant(selectedOptions);
    if (matchingVariant) {
      hiddenInput.value = matchingVariant.id;
      hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));
    } else {
      console.warn("No matching variant found for options:", selectedOptions);
    }
  }

  // Listen for changes to variant picker
  optionInputs.forEach(input => {
    input.addEventListener('change', updateVariant);
  });
});
</script>

{% raw %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log("Sticky bar variant scroll script loaded");

  // Find the sticky variant picker.
  var variantPicker = document.querySelector('[id^="variant-selects-template"][id*="sticky_product_bar"]');
  if (!variantPicker) {
    console.log("Sticky variant picker not found");
    return;
  }
  console.log("Sticky variant picker found:", variantPicker.id);

  // Listen for changes on any input/select within the variant picker.
  variantPicker.addEventListener('change', function(e) {
    console.log("Change event fired on sticky variant picker", e);

    // Gather selected options from the picker.
    var selectedOptions = [];
    variantPicker.querySelectorAll('input[name^="options"], select[name^="options"]').forEach(function(input) {
      selectedOptions.push(input.value.trim());
    });
    console.log("Selected options:", selectedOptions);

    // Find the matching variant using the productData object.
    var matchingVariant = productData.variants.find(function(variant) {
      return variant.options.every(function(opt, idx) {
        return String(opt).toLowerCase() === selectedOptions[idx].toLowerCase();
      });
    });
    if (matchingVariant) {
      console.log("Matching variant found:", matchingVariant);
      if (matchingVariant.featured_media && matchingVariant.featured_media.id) {
        // Find the media gallery element.
        var galleryEl = document.querySelector('[id^="MediaGallery-"]');
        if (!galleryEl) {
          console.log("Gallery element not found");
          return;
        }
        console.log("Gallery element found:", galleryEl.id);

        // Instead of splitting the id, remove the prefix "MediaGallery-"
        var sectionId = galleryEl.id.replace('MediaGallery-', '');
        console.log("Extracted sectionId:", sectionId);

        // Construct the target media id that should match the data-media-id attribute.
        var targetMediaId = sectionId + '-' + matchingVariant.featured_media.id;
        console.log("Looking for media element with data-media-id:", targetMediaId);

        // Locate the media element.
        var mediaEl = document.querySelector('[data-media-id="' + targetMediaId + '"]');
        if (mediaEl) {
          console.log("Found media element, scrolling into view", mediaEl);
          mediaEl.scrollIntoView({ behavior: 'smooth', block: 'start' });
        } else {
          console.log("No matching media element found for", targetMediaId);
        }
      } else {
        console.log("Matching variant does not have a featured_media property", matchingVariant);
      }
    } else {
      console.log("No matching variant found for options", selectedOptions);
    }
  });
});
</script>
{% endraw %}

<!-- Swatch Drawer Functionality -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('=== SWATCH DRAWER SCRIPT LOADED ===');

  const swatchCondensed = document.querySelector('.swatch-condensed');
  const swatchDrawer = document.getElementById('swatch-drawer');
  const swatchDrawerItems = document.querySelectorAll('.swatch-drawer-item');
  const currentSwatchEl = document.querySelector('.current-swatch .swatch');
  const buyButtonsForm = document.querySelector('#sticky-product-bar .add-to-cart form');
  const hiddenInput = buyButtonsForm ? buyButtonsForm.querySelector('input[name="id"]') : null;

  console.log('Swatch drawer initialization:');
  console.log('- swatchCondensed:', swatchCondensed);
  console.log('- swatchCondensed exists?:', !!swatchCondensed);
  console.log('- swatchDrawer:', swatchDrawer);
  console.log('- swatchDrawer exists?:', !!swatchDrawer);
  console.log('- swatchDrawerItems count:', swatchDrawerItems.length);
  console.log('- currentSwatchEl:', currentSwatchEl);

  if (swatchCondensed) {
    console.log('- swatchCondensed computed style:', window.getComputedStyle(swatchCondensed));
    console.log('- swatchCondensed pointer-events:', window.getComputedStyle(swatchCondensed).pointerEvents);
    console.log('- swatchCondensed z-index:', window.getComputedStyle(swatchCondensed).zIndex);
  }

  // Function to position the drawer right above the sticky bar
  function positionDrawer() {
    const stickyBar = document.getElementById('sticky-product-bar');
    if (stickyBar && swatchDrawer) {
      const stickyBarRect = stickyBar.getBoundingClientRect();
      const stickyBarHeight = stickyBarRect.height;
      const drawerHeight = 80; // Approximate height of the swatch drawer

      // Position the drawer directly above the sticky bar
      swatchDrawer.style.bottom = stickyBarHeight + 'px';
    }
  }

  // Toggle drawer when condensed swatch is clicked
  if (swatchCondensed) {
    console.log('✓ Swatch condensed element found, adding event listeners');

    // Add ALL possible event types to debug which one fires
    swatchCondensed.addEventListener('touchstart', function(e) {
      console.log('>>> TOUCHSTART event fired on swatchCondensed');
    }, { passive: true });

    swatchCondensed.addEventListener('touchend', function(e) {
      console.log('>>> TOUCHEND event fired on swatchCondensed');
      console.log('- Event target:', e.target);
      console.log('- Current target:', e.currentTarget);
      console.log('- Drawer active?:', swatchDrawer.classList.contains('active'));

      e.preventDefault();
      e.stopPropagation();

      if (swatchDrawer.classList.contains('active')) {
        console.log('→ Closing swatch drawer');
        closeDrawer();
      } else {
        console.log('→ Opening swatch drawer');
        console.log('- Setting drawer display to block');
        swatchDrawer.style.display = 'block';
        console.log('- Positioning drawer');
        positionDrawer();
        setTimeout(() => {
          console.log('- Adding active class to drawer');
          swatchDrawer.classList.add('active');
          console.log('- Drawer should now be visible');
        }, 10);
      }
    }, { passive: false });

    swatchCondensed.addEventListener('click', function(e) {
      console.log('>>> CLICK event fired on swatchCondensed');
      console.log('- Event target:', e.target);
      console.log('- Current target:', e.currentTarget);

      e.preventDefault();
      e.stopPropagation();

      if (swatchDrawer.classList.contains('active')) {
        console.log('→ Closing drawer (click)');
        closeDrawer();
      } else {
        console.log('→ Opening drawer (click)');
        swatchDrawer.style.display = 'block';
        positionDrawer();
        setTimeout(() => {
          swatchDrawer.classList.add('active');
        }, 10);
      }
    });

    swatchCondensed.addEventListener('pointerdown', function(e) {
      console.log('>>> POINTERDOWN event fired on swatchCondensed');
    });

    swatchCondensed.addEventListener('pointerup', function(e) {
      console.log('>>> POINTERUP event fired on swatchCondensed');
    });

    console.log('✓ All event listeners added to swatchCondensed');

  } else {
    console.log('✗ Swatch condensed element NOT found - drawer will not work');
  }

  // Close drawer
  function closeDrawer() {
    console.log('→ closeDrawer() called');
    swatchDrawer.classList.remove('active');
    setTimeout(() => {
      swatchDrawer.style.display = 'none';
      console.log('→ Drawer display set to none');
    }, 300);
  }

  // Close drawer when clicking outside the drawer content
  document.addEventListener('click', function(e) {
    if (swatchDrawer.classList.contains('active') &&
        !swatchDrawer.contains(e.target) &&
        !swatchCondensed.contains(e.target)) {
      console.log('→ Closing drawer (clicked outside)');
      closeDrawer();
    }
  });

  // Add a general click listener to document to see if ANY clicks are registered
  document.addEventListener('click', function(e) {
    console.log('>>> Document click detected at:', e.target);
  });

  document.addEventListener('touchend', function(e) {
    console.log('>>> Document touchend detected at:', e.target);
  });

  // Handle swatch selection
  swatchDrawerItems.forEach(item => {
    item.addEventListener('click', function() {
      const colorValue = this.dataset.colorValue;
      const variantId = this.dataset.variantId;

      // Remove selected class from all items
      swatchDrawerItems.forEach(i => i.classList.remove('selected'));

      // Add selected class to clicked item
      this.classList.add('selected');

      // Update the condensed swatch display
      const selectedSwatch = this.querySelector('.swatch');
      if (currentSwatchEl && selectedSwatch) {
        // Copy all the background styles from the selected swatch
        const computedStyle = window.getComputedStyle(selectedSwatch);
        currentSwatchEl.style.background = computedStyle.background;
        currentSwatchEl.style.backgroundImage = computedStyle.backgroundImage;
        currentSwatchEl.style.backgroundColor = computedStyle.backgroundColor;
        currentSwatchEl.style.backgroundSize = 'cover';
        currentSwatchEl.style.backgroundPosition = 'center';
      }

      // Update current color data attribute
      if (swatchCondensed) {
        swatchCondensed.querySelector('.current-swatch').dataset.currentColor = colorValue;
      }

      // Update variant ID in form - find correct variant for selected color
      if (hiddenInput) {
        let correctVariantId = variantId;

        // If no variant ID found, try to find it by matching color option
        if (!correctVariantId && typeof productData !== 'undefined') {
          const matchingVariant = productData.variants.find(variant => {
            return variant.options.some(option =>
              String(option).toLowerCase() === String(colorValue).toLowerCase()
            );
          });
          if (matchingVariant) {
            correctVariantId = matchingVariant.id;
          }
        }

        if (correctVariantId) {
          hiddenInput.value = correctVariantId;
          hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));

          // Also update any existing variant selectors on the page
          const variantSelectors = document.querySelectorAll('variant-selects');
          variantSelectors.forEach(selector => {
            const colorInputs = selector.querySelectorAll('input[name*="Color"], input[name*="Cor"]');
            colorInputs.forEach(input => {
              if (input.value === colorValue) {
                input.checked = true;
                input.dispatchEvent(new Event('change', { bubbles: true }));
              }
            });
          });
        }
      }

      // Close drawer after selection
      closeDrawer();

      // Trigger any existing variant change events
      const changeEvent = new CustomEvent('variantchange', {
        detail: {
          colorValue: colorValue,
          variantId: variantId
        }
      });
      document.dispatchEvent(changeEvent);
    });
  });

  // Set initial selected state based on current selection
  const currentColor = swatchCondensed ? swatchCondensed.querySelector('.current-swatch').dataset.currentColor : null;
  if (currentColor) {
    swatchDrawerItems.forEach(item => {
      if (item.dataset.colorValue === currentColor) {
        item.classList.add('selected');
      }
    });
  }
});
</script>

<!-- Hide sticky bar when recommendations become visible -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sticky = document.getElementById('sticky-product-bar');
    if (!sticky) return;

    const targets = Array.from(
      document.querySelectorAll(
        'product-recommendations.related-products, product-recommendations.complementary-products, .mobile-related-products'
      )
    );
    if (!targets.length) return;

    const update = () => {
      const vh = window.innerHeight || document.documentElement.clientHeight;
      const bandTop = vh * 0.15, bandBottom = vh * 0.85;
      const onScreen = targets.some(el => {
        const r = el.getBoundingClientRect();
        return r.top < bandBottom && r.bottom > bandTop;
      });
      sticky.classList.toggle('is-hidden-by-recs', onScreen);
    };

    const io = new IntersectionObserver(update, { threshold: [0, 0.1, 0.25, 0.5] });
    targets.forEach(t => io.observe(t));
    window.addEventListener('scroll', update, { passive: true });
    window.addEventListener('resize', update);
    update();
  });
</script>

<!-- General Accordion Toggle (Click) -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const accordionButtons = document.querySelectorAll('.drawer-content .accordion-button');
  accordionButtons.forEach((button) => {
    // Skip the Envios button so its toggling is handled separately.
    if (button.textContent.trim() === "Envios, trocas e devoluções") return;
    
    button.addEventListener('click', (e) => {
      // Prevent interference from sticky bar drag
      e.stopPropagation();
      const expanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', !expanded);
      const content = button.nextElementSibling;
      if (content) {
        if (expanded) {
          content.style.maxHeight = null;
        } else {
          content.style.maxHeight = content.scrollHeight + 'px';
        }
      }
    });
  });
});
</script>

<!-- General Accordion Toggle (Pointerup) -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.drawer-content .accordion-button').forEach((button) => {
    // Skip the Envios button so its toggling is handled separately.
    if (button.textContent.trim() === "Envios, trocas e devoluções") return;
    
    button.addEventListener('pointerup', (e) => {
      e.stopPropagation();
      const expanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', !expanded);
      const content = button.nextElementSibling;
      if (content) {
        if (expanded) {
          content.style.maxHeight = null;
        } else {
          content.style.maxHeight = content.scrollHeight + 'px';
        }
      }
    });
  });
});
</script>

<!-- Override for "Envios, trocas e devoluções" to open a drawer only -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Locate the Envios button by its exact text content.
  const envioButton = Array.from(document.querySelectorAll('.accordion-button'))
    .find(btn => btn.textContent.trim() === "Envios, trocas e devoluções");

  if (envioButton) {
    // Override the default behavior on click.
    envioButton.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation(); // Block any further click handlers
      
      // Force closed state on the accordion item.
      envioButton.setAttribute('aria-expanded', 'false');
      const content = envioButton.nextElementSibling;
      if (content) {
         content.style.maxHeight = null;
      }
      
      // Open the custom centered drawer.
      const drawer = document.getElementById('envios-drawer');
      if (drawer) {
        drawer.style.display = 'block';
      }
    }, true); // Using the capture phase

    // Also override pointerup so no toggling occurs.
    envioButton.addEventListener('pointerup', function(e) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();
    }, true);
  }

  // Drawer close logic: click on overlay or close button.
  const enviosDrawer = document.getElementById('envios-drawer');
  if (enviosDrawer) {
    enviosDrawer.addEventListener('click', function(e) {
      if (e.target === enviosDrawer || e.target.classList.contains('drawer-close')) {
        enviosDrawer.style.display = 'none';
      }
    });
  }
});
</script>
