/* Size Drawer Styles - High Specificity to Override Theme */
body .size-drawer,
html .size-drawer {
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  width: 100vw !important;
  height: 100vh !important;
  z-index: 9999999 !important;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s ease;
  pointer-events: none;
  background: transparent;
  margin: 0 !important;
  padding: 0 !important;
  transform: none !important;
  display: none;
}

body .size-drawer.active,
html .size-drawer.active {
  opacity: 1 !important;
  visibility: visible !important;
  pointer-events: auto !important;
  display: block !important;
}

.size-drawer-overlay {
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  width: 100% !important;
  height: 100% !important;
  background: rgba(0, 0, 0, 0.6) !important;
  cursor: pointer;
  z-index: 1;
}

.size-drawer-content {
  position: absolute !important;
  bottom: 0 !important;
  left: 0 !important;
  width: 100% !important;
  background: white !important;
  border-radius: 16px 16px 0 0;
  padding: 24px;
  transform: translateY(100%);
  transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  max-height: 70vh;
  overflow-y: auto;
  box-shadow: 0 -8px 32px rgba(0, 0, 0, 0.2) !important;
  z-index: 2;
  margin: 0 !important;
}

.size-drawer.active .size-drawer-content {
  transform: translateY(0) !important;
}

.size-drawer-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
  padding-bottom: 16px;
  border-bottom: 1px solid #e5e5e5;
}

.size-drawer-header h3 {
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #333;
}

.close-drawer {
  background: none !important;
  border: none !important;
  font-size: 28px !important;
  cursor: pointer;
  padding: 8px;
  line-height: 1;
  color: #666;
  transition: color 0.2s ease;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.close-drawer:hover {
  color: #333 !important;
  background: #f5f5f5 !important;
}

.size-guide-link {
  margin-bottom: 20px;
  text-align: center;
}

.size-guide-link a {
  color: #666;
  text-decoration: underline;
  font-size: 14px;
  transition: color 0.2s ease;
}

.size-guide-link a:hover {
  color: #333;
}

.size-options {
  display: grid !important;
  grid-template-columns: repeat(auto-fit, minmax(60px, 1fr)) !important;
  gap: 12px;
  margin-bottom: 16px;
}

.size-option {
  background: white !important;
  border: 2px solid #ddd !important;
  border-radius: 8px;
  padding: 12px 8px;
  text-align: center;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
  min-height: 44px;
  display: flex !important;
  align-items: center;
  justify-content: center;
  position: relative;
  z-index: 1;
  margin: 0 !important;
  width: auto !important;
}

.size-option:hover:not(:disabled) {
  border-color: #333 !important;
  background: #f9f9f9 !important;
  transform: translateY(-1px);
}

.size-option:active {
  transform: translateY(0);
}

.size-option:disabled {
  background: #f5f5f5 !important;
  color: #999 !important;
  cursor: not-allowed;
  border-color: #eee !important;
}

.size-option.selected {
  background: #333 !important;
  color: white !important;
  border-color: #333 !important;
}

.size-option.out-of-stock {
  background: #f5f5f5 !important;
  color: #999 !important;
  border-color: #eee !important;
  cursor: not-allowed;
  text-decoration: line-through;
}

/* Loading States */
.loading-state {
  opacity: 0.7;
  pointer-events: none;
}

.choose-size-btn.loading {
  opacity: 0.7;
}

.choose-size-btn.loading span {
  opacity: 0.7;
}

/* Mobile Responsiveness */
@media screen and (max-width: 749px) {
  .size-drawer-content {
    padding: 20px;
    max-height: 80vh;
  }
  
  .size-options {
    grid-template-columns: repeat(auto-fit, minmax(50px, 1fr)) !important;
    gap: 10px;
  }
  
  .size-option {
    padding: 10px 6px;
    font-size: 13px;
    min-height: 40px;
  }
  
  .close-drawer {
    font-size: 24px !important;
    width: 36px;
    height: 36px;
  }
}

/* Desktop */
@media screen and (min-width: 750px) {
  .size-drawer-content {
    left: 50% !important;
    transform: translateX(-50%) translateY(100%) !important;
    width: 90% !important;
    max-width: 480px !important;
    border-radius: 16px;
    bottom: 20px !important;
    position: fixed !important;
  }
  
  .size-drawer.active .size-drawer-content {
    transform: translateX(-50%) translateY(0) !important;
  }
}

/* Animation for size selection */
@keyframes sizeSelected {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

.size-option.selecting {
  animation: sizeSelected 0.3s ease;
  z-index: 2;
}

/* Test visibility - temporary bright background */
.size-drawer.active {
  background: rgba(255, 0, 0, 0.1) !important; /* Temporary red tint to see if drawer is there */
}

/* Force all drawer elements to be visible */
.size-drawer.active,
.size-drawer.active * {
  visibility: visible !important;
}

/* HIDE SIZE VARIANT SWATCHES - Multiple targeting methods */

/* Method 1: Hide by content */
fieldset:has(legend:contains("Size")),
fieldset:has(legend:contains("Tamanho")),
.product-form__input--swatch:has(legend:contains("Size")),
.product-form__input--swatch:has(legend:contains("Tamanho")) {
  display: none !important;
}

/* Method 2: Hide common size swatch patterns */
fieldset legend:contains("Size"),
fieldset legend:contains("Tamanho"),
.variant-input--size,
.size-selector,
.size-swatches,
input[name*="Size"],
input[name*="Tamanho"],
label[for*="Size"],
label[for*="Tamanho"] {
  display: none !important;
}

/* Method 3: Hide by data attributes and IDs */
[data-option-name*="Size"],
[data-option-name*="Tamanho"],
[id*="Option"][id*="Size"],
[id*="Option"][id*="Tamanho"] {
  display: none !important;
}

/* Method 4: Target specific swatch containers */
.swatch-container:has(input[value="XS"]),
.swatch-container:has(input[value="S"]),
.swatch-container:has(input[value="M"]),
.swatch-container:has(input[value="L"]),
.swatch-container:has(input[value="XL"]) {
  display: none !important;
}

/* Method 5: Hide by common size values */
input[value="XS"],
input[value="S"],
input[value="M"], 
input[value="L"],
input[value="XL"],
input[value="XXL"],
label[for*="XS"],
label[for*="-S-"],
label[for*="-M-"],
label[for*="-L-"],
label[for*="XL"] {
  display: none !important;
}

/* Method 6: Hide parent containers of size inputs */
input[value="XS"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]),
input[value="S"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]),
input[value="M"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]),
input[value="L"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]),
input[value="XL"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]),
input[value="XXL"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]) {
  display: none !important;
}

/* Hide their parent labels and containers */
input[value="XS"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]) ~ label,
input[value="S"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]) ~ label,
input[value="M"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]) ~ label,
input[value="L"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]) ~ label,
input[value="XL"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]) ~ label,
input[value="XXL"]:not([name*="Color"]):not([name*="Cor"]):not([name*="colour"]) ~ label {
  display: none !important;
}